
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.LinkedList;

public class main implements Serializable{
	public static void main(String[] args) {
		final Frame f = new Frame("CardLayoutTest");
		final CardLayout card = new CardLayout(10,10);
		final int SizeNumber = 5;
		final String filename="UserInfo.ser";
		//CardLayout Settings end
		
		//Basic Settings start
		TextArea View;
		Button input,modify,delete,output,exit;
		Button confirm,listoutput,inputExit;
		Button deleteExit,deletebutton;
		Button modifyconfirm,modifyprocess;
		Button Back;
		f.setLayout(card);
		f.addWindowListener(new EventHandler());
		Panel card1 = new Panel();
		Panel card2 = new Panel();
		Panel card3 = new Panel();
		Panel card4 = new Panel();
		Panel card5 = new Panel();
		Panel card33 = new Panel();
		//Basic Settings end
		
		//main menu configure start
		f.add(card1,"main");
		f.add(card2,"input");
		f.add(card3,"Modify");
		f.add(card4,"Delete");
		f.add(card5,"Output");
		f.add(card33,"ModifyProcessing");
		input=new Button("입력");
		input.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e) {
				card.show(f,"input");
			}
		});
		
		modify=new Button("수정");
		modify.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e) {
				card.show(f,"Modify");
			}
		});
		delete=new Button("삭제");	
		delete.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e) {
				card.show(f,"Delete");
			}
		});
		output=new Button("출력");
		output.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e) {
				card.show(f,"Output");
			}
		});
		Back=new Button("돌아가기");
		Back.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e) {
				card.show(f,"main");
			}
		});
		card1.add(input);
		card1.add(modify);
		card1.add(delete);
		card1.add(output);
		//main menu configure end
		
		//input menu configure start
		
		Label name=new Label("이름 :");
		Label number=new Label("전화번호 :");
		Label memo=new Label("메모: ");
		confirm=new Button("확인");
		inputExit=new Button("돌아가기");
		
		TextField inputname=new TextField(10);
		TextField inputnumber=new TextField(11);
		TextField inputmemo=new TextField(10);
		
		card2.add(name);
		card2.add(inputname);
		card2.add(number);
		card2.add(inputnumber);
		card2.add(memo);
		card2.add(inputmemo);
		
		inputExit.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e1) {
				card.show(f,"main");
			}	
		});
		ArrayList list=new ArrayList();
		
		confirm.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e) {
				String Pname=inputname.getText();
				String Pnumber=inputnumber.getText();
				String Pmemo=inputmemo.getText();
				try{
					int i=0;
					
					FileOutputStream fos = new FileOutputStream(filename);
					BufferedOutputStream bos = new BufferedOutputStream(fos);
					ObjectOutputStream out = new ObjectOutputStream(bos);
					
					
						PeopleInfo Username1 =new PeopleInfo(Pname,Pnumber,Pmemo);
						list.add(Username1);
						out.writeObject(Username1);
						out.writeObject(list);
						out.close();
						i++;
					
				}catch(IOException e1) {
					e1.printStackTrace();
				}
				finally {
				
				}
			}
		});
		card2.add(confirm);
		card2.add(inputExit);
		//input menu configure end
		
		//Modify menu configure start
		Label modifyguide = new Label("수정할 객체의 번호를 입력하세요");
		TextField modifyindex = new TextField(3);
		Label modifyguide2 = new Label("수정할 객체의 속성을 입력해주세요");
		TextField modifyproperty = new TextField(3);
		modifyconfirm = new Button("확인");
		modifyprocess = new Button("처리하기");
		Label modifyname=new Label("이름");
		TextField modifynametext = new TextField(10);
		Label modifyPhoneNumber = new Label("전화번호");
		TextField modifyPhoneNumbertext = new TextField(10);
		Label modifymemo=new Label("메모");
		TextField modifymemotext = new TextField(10);
		
		card3.add(modifyguide);
		card3.add(modifyindex);
		card3.add(modifyguide2);
		card3.add(modifyproperty);
		card3.add(modifyconfirm);
		
		card3.add(modifyname);
		card3.add(modifynametext);
		card3.add(modifyPhoneNumber);
		card3.add(modifyPhoneNumbertext);
		card3.add(modifymemo);
		card3.add(modifymemotext);
		card3.add(modifyprocess);
		card3.add(Back);
		modifyprocess.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e) {
				String newName ,newPhoneNumber, newMemo;
				try {
					int modifynumber = Integer.parseInt(modifyproperty.getText(),10);
					int savenumber = modifynumber-1;
					newName = modifynametext.getText();
					newPhoneNumber = modifyPhoneNumbertext.getText();
					newMemo = modifymemotext.getText();
					PeopleInfo ModifyUser = new PeopleInfo(newName,newPhoneNumber,newMemo);
					
					ArrayList list2 = new ArrayList();
					
					FileInputStream fis = new FileInputStream(filename);
					BufferedInputStream bis = new BufferedInputStream(fis);
					ObjectInputStream in = new ObjectInputStream(bis);
					
					FileOutputStream fos = new FileOutputStream(filename);
					BufferedOutputStream bos = new BufferedOutputStream(fos);
					ObjectOutputStream out = new ObjectOutputStream(bos);
					
					PeopleInfo Username1=(PeopleInfo) in.readObject();
					list2 = (ArrayList)in.readObject();
					
					list2.add(savenumber, ModifyUser);
					list2.remove(modifynumber);
					
					out.writeObject(Username1);
					out.writeObject(list2);
					out.close();
					in.close();
					
					//list2.remove(listnumber);
				
			
			
			
			
			}catch(Exception e4) {
				e4.printStackTrace();
			}
			}
		});
		
		
		//Modify menu configure end
		
		
		//Delete menu configure start
		
		Label guide = new Label("삭제할 객체의 번호를 입력하세요.");
		TextField indexnumber =new TextField(3);
		deleteExit=new Button("돌아가기");
		deleteExit.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e1) {
				card.show(f,"main");
			}	
		});
		
		deletebutton=new Button("삭제하기");
		deletebutton.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e1) {
				try {
					String stringnumber = indexnumber.getText();
					int listnumber = Integer.parseInt(stringnumber,10);
					listnumber=listnumber-1;
					ArrayList list2 = new ArrayList();
					
					FileInputStream fis = new FileInputStream(filename);
					BufferedInputStream bis = new BufferedInputStream(fis);
					ObjectInputStream in = new ObjectInputStream(bis);
					
					FileOutputStream fos = new FileOutputStream(filename);
					BufferedOutputStream bos = new BufferedOutputStream(fos);
					ObjectOutputStream out = new ObjectOutputStream(bos);
					
					PeopleInfo Username1=(PeopleInfo) in.readObject();
					list2 = (ArrayList)in.readObject();
					list2.remove(listnumber);
					int ListSize=list2.size();
					int i=0;
					
					while(i<ListSize) {
						ArrayList list3 = new ArrayList();
						list3.add(list2.indexOf(i));
						out.writeObject(Username1);
						out.writeObject(list2);	
						i++;
					}
					out.close();
					in.close();
					//System.out.println(list);
					}
				catch(Exception e2) {
				e2.printStackTrace();
				}
			}	
		});
		
		card4.add(guide);
		card4.add(indexnumber);
		card4.add(deletebutton);
		card4.add(deleteExit);
		
		//Delete menu configure end
		
		//Output menu configure start
		View=new TextArea(10,50);
		card5.add(View);
		listoutput=new Button("출력확인");
		listoutput.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e) {
			try {
				FileInputStream fis = new FileInputStream(filename);
				BufferedInputStream bis = new BufferedInputStream(fis);
				
				ObjectInputStream in = new ObjectInputStream(bis);
				
				PeopleInfo Username1=(PeopleInfo) in.readObject();
				ArrayList list1 = (ArrayList)in.readObject();
				
				View.setText(list1.toString());
				//System.out.println(list);
				in.close();
				}
			catch(Exception e2) {
			e2.printStackTrace();
			}
			}
		});
		card5.add(listoutput);
		
		//Output menu configure end
		
		/*
		class Handler extends MouseAdapter{
			public void mouseClicked(MouseEvent e) {
				if(e.getModifiers()==e.BUTTON3_MASK) {
					card.previous(f);
				}else {
					card.next(f);
				}
			}
		}
		card1.addMouseListener(new Handler());
		card2.addMouseListener(new Handler());
		card3.addMouseListener(new Handler());
		*/
		
		f.setSize(600,600);
		f.setLocation(200,200);
		f.setVisible(true);
		
		card.show(f, "main");
	}
	

}
